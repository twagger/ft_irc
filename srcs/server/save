	char host[1025];
	//char serv[32];
	//int status;


    // accept the connect request
    memset(&client_addr, 0, sizeof(struct sockaddr_in));
    memset(&sin_size, 0, sizeof(socklen_t));
    newfd = accept(sockfd, reinterpret_cast<struct sockaddr*>(&client_addr), \
        &sin_size);
    if (newfd == -1)
        throw Server::acceptException();

    // Ask getsockname to fill in this socket's local address
    getsockname(newfd, reinterpret_cast<struct sockaddr*>(&client_addr), &sin_size);
    // create a new empty user
    this->_userList[newfd] = new User(newfd, inet_ntoa(client_addr.sin_addr));
	getsockname(newfd, reinterpret_cast<struct sockaddr*>(&client_addr), &sin_size);
	std::cout << "[DEBUG] getsockname " << inet_ntoa(client_addr.sin_addr) << std::endl;
	//if ((status = getnameinfo(reinterpret_cast<struct sockaddr*>(&client_addr), sin_size, host, sizeof(host), serv, sizeof(serv), NI_NOFQDN)) != 0) {
	//	std::cout << "getaddrinfo:" << gai_strerror(status) << std::endl;
	//	return ;
	//}
	//std::cout << "[DEBUG] getnameinfo " << host << " " << serv <<  std::endl;

	// getnameinfo(reinterpret_cast<struct sockaddr*>(&client_addr), sin_size, host, 1024, NULL, 0, 0);

	// char	ip[INET_ADDRSTRLEN];
	// inet_ntop(AF_INET, &(client_addr.sin_addr), ip, INET_ADDRSTRLEN);
	// std::cout	<< "New connection." << std::endl
	// 			<< "\tsocket fd : " << newfd << std::endl
	// 			<< "\tip : " << ip << std::endl
	// 			<< "\tport : " << ntohs(client_addr.sin_port) << std::endl
	// 			<<	"\thostname : " << host << std::endl;
